for(x in lower:(upper-1))
integral = integral+f(x)
return(integral)
}
poisson_pdf <- sapply(lambda_vec, function(L) {dzeropois(k, L)})
poisson_cum <- sapply(lambda_vec, function(L) {pzeropois(k, L)})
linetype <- 2-(1:length(lambda_vec))%%2
n=1
random_numbers <- rzeropois(n, lambda)
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
# Parameters for the poisson distribution
lambda_vec <- c(1.4,4,6, 8)
k <- 1:13
dzeropois <- function(k, lambda){
#to handle float numbers
k = trunc(k)
return(lambda^k*exp(-lambda)/factorial(k)/(1-exp(-lambda)))
}
#designed to handle vectors of q in input
pzeropois <- function(q, lambda) {
#to handle float numbers
q = trunc(q)
P_cum <- numeric(length(q))
for (i in 1:length(q)) {
k <- 1:q[i]
P_cum[i] <- sum(dzeropois(k, lambda))
}
return(P_cum)
}
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
if(is.nan(x))
return(x)
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
} else
x <- x - 1
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
return(p)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
integrate_step <- function(f, lower, upper){
integral = 0
for(x in lower:(upper-1))
integral = integral+f(x)
return(integral)
}
poisson_pdf <- sapply(lambda_vec, function(L) {dzeropois(k, L)})
poisson_cum <- sapply(lambda_vec, function(L) {pzeropois(k, L)})
linetype <- 2-(1:length(lambda_vec))%%2
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
# Parameters for the poisson distribution
lambda_vec <- c(1.4,4,6, 8)
k <- 1:13
dzeropois <- function(k, lambda){
#to handle float numbers
k = trunc(k)
return(lambda^k*exp(-lambda)/factorial(k)/(1-exp(-lambda)))
}
#designed to handle vectors of q in input
pzeropois <- function(q, lambda) {
#to handle float numbers
q = trunc(q)
P_cum <- numeric(length(q))
for (i in 1:length(q)) {
k <- 1:q[i]
P_cum[i] <- sum(dzeropois(k, lambda))
}
return(P_cum)
}
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
if(is.nan(x))
return(x)
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
} else
x <- x - 1
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
integrate_step <- function(f, lower, upper){
integral = 0
for(x in lower:(upper-1))
integral = integral+f(x)
return(integral)
}
poisson_pdf <- sapply(lambda_vec, function(L) {dzeropois(k, L)})
poisson_cum <- sapply(lambda_vec, function(L) {pzeropois(k, L)})
linetype <- 2-(1:length(lambda_vec))%%2
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
if(is.nan(x))
return(x)
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
} else
x <- x - 1
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
n=1
random_numbers <- rzeropois(n, lambda)
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
print(x)
if(is.nan(x))
return(x)
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
} else
x <- x - 1
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
n=1
random_numbers <- rzeropois(n, lambda)
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
print(x)
print(threshold)
print(f(x, lambda))
if(is.nan(x))
return(x)
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
} else
x <- x - 1
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
n=1
random_numbers <- rzeropois(n, lambda)
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
print(x)
print(threshold)
print(f(x, lambda))
if(is.nan(x))
return(x)
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
}
else if(x>1)
x <- x - 1
else
return(x)
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
n=1
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
}
else if(x>1)
x <- x - 1
else
return(x)
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
n=100
random_numbers <- rzeropois(n, lambda)
print(random_numbers)
n = 1000
random_numbers <- rzeropois(n, lambda)
#plot
hist(random_numbers, col = color_vector[7], xlab = "x", ylab = "Counts")
n = 1000
random_numbers <- rzeropois(n, lambda)
#plot
hist(random_numbers, col = color_vector[5], xlab = "x", ylab = "Counts")
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 10 + 0.5, by = 1)
#plot
hist(random_numbers, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 10 + 0.5, by = 1)
#plot
hist(random_numbers, nreaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 10 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(aes(x=random_numbers, y = stat(density(x))), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(aes(x=random_numbers, y = stat(density(random_numbers))), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(aes(x=random_numbers, y = stat(density), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(aes(x=random_numbers, y = after_stat(density)), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(randu, aes(y = after_stat(density)), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, aes(y = after_stat(density)), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, y = after_stat(density), breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Counts", )
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(density(random_numbers), col = "red")
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(dzeropois(random_numbers), col = "red")
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(dzeropois(random_numbers, lambda), col = "red")
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(dzeropois(breaks, lambda), col = "red")
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
plot(k,poisson_pdf[,1], type = "s", lwd = 2, col = color_vector[1],
xlab = "k", ylab = "PDF", lty = linetype[1])
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
line(k,poisson_pdf[,1], type = "s", lwd = 2, col = color_vector[1],
xlab = "k", ylab = "PDF", lty = linetype[1])
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
line(k,poisson_pdf[,1], lwd = 2, col = color_vector[1], , lty = linetype[1])
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(k,poisson_pdf[,1], lwd = 2, col = color_vector[1], , lty = linetype[1])
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(k,poisson_pdf[,1], type='s', lwd = 2, col = color_vector[1], , lty = linetype[1])
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(k,poisson_pdf[,1]-0.5, type='s', lwd = 2, col = color_vector[1], , lty = linetype[1])
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(k-0.5, poisson_pdf[,1], type='s', lwd = 2, col = color_vector[1], lty = linetype[1])
knitr::opts_chunk$set(echo = TRUE)
color_vector <- c("#CC0000",   # Dark red
"#CC79A7",   # Muted purple
"#D55E00",   # Vermilion
"#009E73",   # Bluish green
"#56B4E9",   # Sky blue
'#000046',   # Deep Blue
"#DB1E60",   # Pinkish-red
"#E69F00")   # Yellow-orange
library(dplyr)
library(ggplot2)
# Parameters for the poisson distribution
lambda_vec <- c(1.4,4,6, 8)
k <- 1:13
integrate_step <- function(f, lower, upper){
integral = 0
for(x in lower:(upper-1))
integral = integral+f(x)
return(integral)
}
dzeropois <- function(k, lambda){
#to handle float numbers
k = trunc(k)
return(lambda^k*exp(-lambda)/factorial(k)/(1-exp(-lambda)))
}
#designed to handle vectors of q in input
pzeropois <- function(q, lambda) {
#to handle float numbers
q = trunc(q)
P_cum <- numeric(length(q))
for (i in 1:length(q)) {
k <- 1:q[i]
P_cum[i] <- sum(dzeropois(k, lambda))
}
return(P_cum)
}
# Function used to invert the pzeropois
threshold_search <- function(f, guess, threshold, lambda) {
x <- trunc(guess)
while(TRUE) {
if(f(x, lambda) - threshold < 0) {
if(f(x + 1, lambda) - threshold > 0)
return(x)
else
x <- x + 1
}
else if(x>1)
x <- x - 1
else
return(x)
}
}
# Function to generate random samples from Poisson distribution
rzeropois <- function(n, lambda) {
p <- runif(n, min = 1e-10, max = 1-1e-10)
x <- sapply(p, function(probability) {
threshold_search(pzeropois, lambda, probability, lambda)
})
return(x)
}
poisson_pdf <- sapply(lambda_vec, function(L) {dzeropois(k, L)})
poisson_cum <- sapply(lambda_vec, function(L) {pzeropois(k, L)})
linetype <- 2-(1:length(lambda_vec))%%2
# create the first straight line plot
plot(k,poisson_pdf[,1], type = "s", lwd = 2, col = color_vector[1],
xlab = "k", ylab = "PDF", lty = linetype[1])
# create all the others
for (i in 2:length(lambda_vec)) {
lines(k, poisson_pdf[, i], col=color_vector[i], type='s', lwd=2, lty = linetype[i])
}
grid()
# Create legend labels
legend_labels <- paste('lambda = ', lambda_vec)
# Add a legend
legend("topright", legend = legend_labels, col = color_vector[1:length(lambda_vec)], lty = linetype, lwd = 2)
# Add a title
title("Theoretical zero-truncated Poisson Distribution")
# create the first straight line plot
plot(k,poisson_cum[,1], type = "s", lwd = 2, col = color_vector[1],
xlab = "k", ylab = "P", lty = linetype[1])
# create all the others
for (i in 2:length(lambda_vec)) {
lines(k, poisson_cum[, i], col=color_vector[i], type='s', lwd=2, lty = linetype[i])
}
grid()
# Create legend labels
legend_labels <- paste('lambda = ', lambda_vec)
# Add a legend
legend("bottomright", legend = legend_labels, col = color_vector[1:length(lambda_vec)], lty = linetype, lwd = 2)
# Add a title
title("Theoretical zero-truncated Poisson Cumulative Distribution")
lambda = 1.4
mean = integrate_step(function(x){x*dzeropois(x,lambda)}, lower = 1, upper = 15)
std  = integrate_step(function(x){x^2*dzeropois(x,lambda)}, lower = 1, upper = 15)
writeLines(sprintf(
"
Taking lambda = 1.4 and truncating the sum at k=15 we can obtain:
- The mean value is %.2f
- The standard deviation is %.2f
",
mean[1], std[1])
)
n = 1000
random_numbers <- rzeropois(n, lambda)
breaks <- seq(1 - 0.5, 7 + 0.5, by = 1)
#plot
hist(random_numbers, breaks=breaks, col = color_vector[5], xlab = "x", ylab = "Density", freq = FALSE)
lines(k-0.5, poisson_pdf[,1], type='s', lwd = 2, col = color_vector[1], lty = linetype[1])
