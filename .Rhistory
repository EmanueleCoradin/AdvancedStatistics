couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]==deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
',
N, mean(couples), sd(couples)
))
hist(couples, breaks = seq(0,27))
plot(unique(couples), unique(couples))
#let's simulate the experiment
N <- 10000 #number of simulated events
deck <- c(replicate(26, 0), replicate(26, 1))
couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]==deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
',
N, mean(couples), sd(couples)
))
hist(couples, breaks = seq(0,27))
print(unique(couples))
#let's simulate the experiment
N <- 10000 #number of simulated events
deck <- c(replicate(26, 0), replicate(26, 1))
couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]!=deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
Using the Chebyshev’s inequality, an upper bound of P(X<11) is: %.2f
',
var(couples)/1
))
#let's simulate the experiment
N <- 10000 #number of simulated events
deck <- c(replicate(26, 0), replicate(26, 1))
couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]!=deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
Using the Chebyshev’s inequality, an upper bound of P(X<11) is: %.2f
',
N, mean(couples), sd(couples), var(couples)
))
#let's simulate the experiment
N <- 10000 #number of simulated events
deck <- c(replicate(26, 0), replicate(26, 1))
couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]!=deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
Using the Chebyshev’s inequality, an upper bound of P(X<11) is: %.2f
',
N, mean(couples), sd(couples), var(couples)/(10-mean(couples))^2
))
#let's simulate the experiment
N <- 10000 #number of simulated events
deck <- c(replicate(26, 0), replicate(26, 1))
couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]!=deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
Using the Chebyshev’s inequality, an upper bound of P(X<11) is: %.2f
',
N, mean(couples), sd(couples), var(couples)/(10-mean(couples))^2
))
print(unique(couples))
#let's simulate the experiment
N <- 10000 #number of simulated events
deck <- c(replicate(26, 0), replicate(26, 1))
couples <- replicate(N, 0)
for (ie in 1:N) {
deck <- sample(deck, 52)
for(ic in seq(1,51, by=2)){
if(deck[ic]!=deck[ic+1])
couples[ie]=couples[ie]+1
}
}
writeLines(sprintf(
'
Simulating %i events:
- The mean is %.2f;
- The standard deviation is %.2f.
Using the Chebyshev’s inequality, an upper bound of P(X<11) is: %.2f
',
N, mean(couples), sd(couples), var(couples)/(10-mean(couples))^2
))
?runif
?qunif
print(2.54^2/9)
print(2.56^2/(10-13.23)^2)
dmuonenergy <- function(E, N, E0, g){ ifelse(test = E<E0, yes = return(N), no = return(N*(E-E0+1)^(-g))) }
pmuonenergy <- function(q, N, E0, g){ return(integrate(function (x) {sapply(x, function(E) {dmuonenergy(E, N, E0, g) })}, lower = 0, upper = q)$value) }
qmuonenergy <- function(p, N, E0, g) uniroot(function(q) pmuonenergy(q, N, E0, g) - p, interval = c(0, Inf))$root
rmuonenergy <- function(n, N, E0, g){
uniform_sampling <- runif(n, min = 1.e-10, max = 1-1.e-10)
return(sapply(uniform_sampling, function(p) qmuonenergy(p, N, E0, g)))
}
normalize <- function(E0, g){ pmuonenergy(Inf, 1, E0, g)^-1 }
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
dmuonenergy <- function(E, N, E0, g){ ifelse(test = E<E0, yes = return(N), no = return(N*(E-E0+1)^(-g))) }
pmuonenergy <- function(q, N, E0, g){ return(integrate(function (x) {sapply(x, function(E) {dmuonenergy(E, N, E0, g) })}, lower = 0, upper = q)$value) }
qmuonenergy <- function(p, N, E0, g) uniroot(function(q) pmuonenergy(q, N, E0, g) - p, interval = c(0, 1e6))$root
rmuonenergy <- function(n, N, E0, g){
uniform_sampling <- runif(n, min = 1.e-10, max = 1-1.e-10)
return(sapply(uniform_sampling, function(p) qmuonenergy(p, N, E0, g)))
}
normalize <- function(E0, g){ pmuonenergy(Inf, 1, E0, g)^-1 }
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
knitr::opts_chunk$set(echo = TRUE)
color_vector <- c("#CC0000",   # Dark red
"#CC79A7",   # Muted purple
"#D55E00",   # Vermilion
"#009E73",   # Bluish green
"#56B4E9",   # Sky blue
'#000046',   # Deep Blue
"#DB1E60",   # Pinkish-red
"#E69F00")   # Yellow-orange
knitr::opts_chunk$set(echo = TRUE)
color_vector <- c("#CC0000",   # Dark red
"#CC79A7",   # Muted purple
"#D55E00",   # Vermilion
"#009E73",   # Bluish green
"#56B4E9",   # Sky blue
'#000046',   # Deep Blue
"#DB1E60",   # Pinkish-red
"#E69F00")   # Yellow-orange
library(dplyr)
library(ggplot2)
dmuonenergy <- function(E, N, E0, g){ ifelse(test = E<E0, yes = return(N), no = return(N*(E-E0+1)^(-g))) }
pmuonenergy <- function(q, N, E0, g){ return(integrate(function (x) {sapply(x, function(E) {dmuonenergy(E, N, E0, g) })}, lower = 0, upper = q)$value) }
qmuonenergy <- function(p, N, E0, g) uniroot(function(q) pmuonenergy(q, N, E0, g) - p, interval = c(0, 1e6))$root
rmuonenergy <- function(n, N, E0, g){
uniform_sampling <- runif(n, min = 1.e-10, max = 1-1.e-10)
return(sapply(uniform_sampling, function(p) qmuonenergy(p, N, E0, g)))
}
normalize <- function(E0, g){ pmuonenergy(Inf, 1, E0, g)^-1 }
E0 <- 7.25 #GeV
g  <- 2.7  #gamma factor
#Compute the normalization factor
N = normalize(E0, g)
print(sprintf("The normalization factor is %.2f", N))
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
plot(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1], xlab="E [GeV]", ylab="PDF")
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Plotting the cumulative
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){pmuonenergy(E, N, E0, g)})
#plot
plot(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1], xlab="E [GeV]", ylab="P")
grid()
title(expression(paste("Muon energy cdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Comute the mean value
mean <- integrate(function(x){ sapply(x, function(E){ E * dmuonenergy(E, N, E0, g) }) }, lower = 0, upper = Inf)$value
sprintf("The mean value is %.2f", mean)
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
dmuonenergy <- function(E, N, E0, g){ ifelse(test = E<E0, yes = return(N), no = return(N*(E-E0+1)^(-g))) }
pmuonenergy <- function(q, N, E0, g){ return(integrate(function (x) {sapply(x, function(E) {dmuonenergy(E, N, E0, g) })}, lower = 0, upper = q)$value) }
qmuonenergy <- function(p, N, E0, g){ ifelse(p<N*E0, p/N, ((1-g)*(p/N-E0)+1)^(1/1-gamma)+E0-1) }
rmuonenergy <- function(n, N, E0, g){
uniform_sampling <- runif(n, min = 1.e-10, max = 1-1.e-10)
return(sapply(uniform_sampling, function(p) qmuonenergy(p, N, E0, g)))
}
normalize <- function(E0, g){ pmuonenergy(Inf, 1, E0, g)^-1 }
E0 <- 7.25 #GeV
g  <- 2.7  #gamma factor
#Compute the normalization factor
N = normalize(E0, g)
print(sprintf("The normalization factor is %.2f", N))
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
plot(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1], xlab="E [GeV]", ylab="PDF")
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Plotting the cumulative
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){pmuonenergy(E, N, E0, g)})
#plot
plot(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1], xlab="E [GeV]", ylab="P")
grid()
title(expression(paste("Muon energy cdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Comute the mean value
mean <- integrate(function(x){ sapply(x, function(E){ E * dmuonenergy(E, N, E0, g) }) }, lower = 0, upper = Inf)$value
sprintf("The mean value is %.2f", mean)
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
dmuonenergy <- function(E, N, E0, g){ ifelse(test = E<E0, yes = return(N), no = return(N*(E-E0+1)^(-g))) }
pmuonenergy <- function(q, N, E0, g){ return(integrate(function (x) {sapply(x, function(E) {dmuonenergy(E, N, E0, g) })}, lower = 0, upper = q)$value) }
qmuonenergy <- function(p, N, E0, g){ ifelse(p<N*E0, p/N, ((1-g)*(p/N-E0)+1)^(1/1-g)+E0-1) }
rmuonenergy <- function(n, N, E0, g){
uniform_sampling <- runif(n, min = 1.e-10, max = 1-1.e-10)
return(sapply(uniform_sampling, function(p) qmuonenergy(p, N, E0, g)))
}
normalize <- function(E0, g){ pmuonenergy(Inf, 1, E0, g)^-1 }
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies)
dmuonenergy <- function(E, N, E0, g){ ifelse(test = E<E0, yes = return(N), no = return(N*(E-E0+1)^(-g))) }
pmuonenergy <- function(q, N, E0, g){ return(integrate(function (x) {sapply(x, function(E) {dmuonenergy(E, N, E0, g) })}, lower = 0, upper = q)$value) }
qmuonenergy <- function(p, N, E0, g){ ifelse(p<N*E0, p/N, ((1-g)*(p/N-E0)+1)^(1/(1-g))+E0-1) }
rmuonenergy <- function(n, N, E0, g){
uniform_sampling <- runif(n, min = 1.e-10, max = 1-1.e-10)
return(sapply(uniform_sampling, function(p) qmuonenergy(p, N, E0, g)))
}
normalize <- function(E0, g){ pmuonenergy(Inf, 1, E0, g)^-1 }
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies)
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=1000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=1000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = seq(0, 13))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=1000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = seq(0, 13, by=0.5))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=1000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 20)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=1000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 15)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=1000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 10)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
#lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 10)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
#lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 20)
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
#lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 20, xlim=c(0,14))
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
#lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 50, xlim=c(0,14))
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
#lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 50, xlim=c(0,14))
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 50, xlim=c(0,14), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
grid()
title(expression(paste("Muon energy pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=10000
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 50, xlim=c(0,14), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=13
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 50, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 13, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 10, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 11, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 12, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 9, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 8, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 13, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
#Generate 106 random numbers from this distribution, show them in an histogram and superimpose the pdf (with a line or with a sufficient number of points).
n=106
generated_energies <- rmuonenergy(n,  N, E0, g)
hist(generated_energies, xlab="E [GeV]", ylab="PDF", freq = FALSE, breaks = 10, xlim=c(0,13), main='', col = color_vector[5])
#Plotting the pdf
x_plot <- seq(from=0, to=13, length.out=50)
y_plot <- sapply(x_plot, function(E){dmuonenergy(E, N, E0, g)})
lines(x_plot, y_plot, type='l', lwd = 2, col = color_vector[1], lty = linetype[1])
legend_labels <- paste('Expected distribution')
legend("topright", legend = legend_labels, col = color_vector[1], lty = linetype[1], lwd = 2)
grid()
title(expression(paste("Generated muon energies pdf [E0" , " = 7.25GeV, ", gamma, " = 2.7]")))
