chains = 2 ,
iter = 5000 ,
warmup = 200 ,
thin = 1)
stanPosterior <- as.array(stanFit)
# Inspecting the chains
inspect_chains <- function(stanFit, stanPosterior, parameter){
rstan :: traceplot (stanFit ,pars=c(parameter)) +
theme_minimal() +
labs(title = paste("Trace Plot of ", parameter),
x = "Iteration",
y = parameter)
mcmcCoda <- mcmc.list( lapply (1:ncol( stanFit ), function (x) { mcmc(stanPosterior[,x ,]) }))
autocorr.plot(mcmcCoda)
# Default plots of the posterior
color_scheme_set("red")
density_plot <- plot(stanFit ,pars=c(parameter))+
theme_minimal() +
labs(title = paste("Posterior Density of ", parameter),
x = parameter,
y = "Density")
print(density_plot)
areas_plot <- mcmc_areas(stanPosterior, pars=c(parameter), point_est = 'mean', prob = 0.95)+
theme_minimal() +
labs(title = paste("Posterior Distribution of ", parameter),
x = parameter,
y = "Density")
print(areas_plot)
hist_plot <- mcmc_hist(stanPosterior, pars=c(parameter)) +
theme_minimal() +
labs(title = paste("Posterior Histogram of ", parameter),
x = parameter,
y = "Frequency")
print(hist_plot)
# --------------- write output ------------------
lambda_summary <- summary(stanFit, pars = parameter)$summary
lambda_mean <- lambda_summary[parameter, "mean"]
lambda_sd <- lambda_summary[parameter, "sd"]
lambda_cred_int <- lambda_summary[parameter, c("2.5%", "97.5%")]
writeLines(sprintf('
Mean of %s: %.3f
SD of %s: %.3f
95%% credibility interval: [ %.3f , %.3f ]',
parameter,lambda_mean, parameter, lambda_sd, lambda_cred_int[1], lambda_cred_int[2]
))
}
inspect_chains(stanFit, stanPosterior, "Lambda")
modelString_Jeffrey =
"
data {
int <lower=0> N;
int y[N];
}
parameters {
real <lower=0> Lambda;
}
model {
target += -0.5*log(Lambda);
y ~ poisson (Lambda);
}
"
stanDso_Jeffrey <- stan_model ( model_code = modelString_Jeffrey )
stanFit_Jeffrey <- sampling ( object = stanDso_Jeffrey ,
data = dataList ,
chains = 2 ,
iter = 5000 ,
warmup = 200 ,
thin = 1)
stanPosterior_Jeffrey <- as.array(stanFit_Jeffrey)
inspect_chains(stanFit_Jeffrey, stanPosterior_Jeffrey, "Lambda")
alpha <- 12
beta <- 115
beta_posterior <- function(p) sapply(p, function(x) dbeta(x, alpha, beta))
mean <- getBetaMean(alpha, beta)
SD   <- getBetaSD  (alpha, beta)
curve(beta_posterior, from = 0, to=1, n = 1000, xlim = c(0,0.3), main="Bayesian posterior of p", xlab="p", ylab = "probability density", col=color_vector[1], lwd=3, ylim = c(0, 16.5))
beta_95_interval <- sapply(c(0.025, 0.975), function(p) qbeta(p, alpha, beta))
x_plot <- seq(beta_95_interval[1], beta_95_interval[2], length.out=1000)
y_plot <- c(0, beta_posterior(x_plot[2:999]), 0)
polygon(x_plot, y_plot, col = adjustcolor(color_vector[5], alpha.f = 0.5), border = NA)
abline(v = mean, col = color_vector[7], lty=2, lwd = 3)
abline(v = mean - SD, col = color_vector[6], lty = 3, lwd = 3)
abline(v = mean + SD, col = color_vector[6], lty = 3, lwd = 3)
legend('topright', legend = c('mean', 'mean ± std'), lty = c(2, 3, 3), lwd=3, col = c(color_vector[7], color_vector[6], color_vector[6]))
legend('right', legend = '95% credibility interval', fill = adjustcolor(color_vector[5], alpha.f = 0.5))
writeLines(sprintf(
'The 95%% credibility interval for the posterior is [ %.3f , %.3f ]', beta_95_interval[1], beta_95_interval[2]))
# Frequentist test
binom.test(x=11, n = 116, p = 0.1, alternative = "two.sided")
# Frequentist test
binom.test(x=9, n = 165, p = 0.1, alternative = "two.sided")
alpha <- 21
beta <- 271
beta_posterior <- function(p) sapply(p, function(x) dbeta(x, alpha, beta))
mean <- getBetaMean(alpha, beta)
SD   <- getBetaSD  (alpha, beta)
curve(beta_posterior, from = 0, to=1, n = 1000, xlim = c(0,0.17), main="Bayesian posterior of p", xlab="p", ylab = "probability density", col=color_vector[1], lwd=3, ylim = c(0, 30))
beta_95_interval <- sapply(c(0.025, 0.975), function(p) qbeta(p, alpha, beta))
x_plot <- seq(beta_95_interval[1], beta_95_interval[2], length.out=1000)
y_plot <- c(0, beta_posterior(x_plot[2:999]), 0)
polygon(x_plot, y_plot, col = adjustcolor(color_vector[5], alpha.f = 0.5), border = NA)
abline(v = mean, col = color_vector[7], lty=2, lwd = 3)
abline(v = mean - SD, col = color_vector[6], lty = 3, lwd = 3)
abline(v = mean + SD, col = color_vector[6], lty = 3, lwd = 3)
legend('topright', legend = c('mean', 'mean ± std'), lty = c(2, 3, 3), lwd=3, col = c(color_vector[7], color_vector[6], color_vector[6]))
legend('right', legend = '95% credibility interval', fill = adjustcolor(color_vector[5], alpha.f = 0.5))
writeLines(sprintf(
'The 95%% credibility interval for the posterior is [ %.3f , %.3f ]', beta_95_interval[1], beta_95_interval[2]))
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
n <- 116
y <- 11
dataList= list(n=n, y = y)
modelString  =
"
data {
int <lower=0> n;
int <lower=0> y;
}
parameters {
real <lower=0, upper=1> p;
}
model {
p ~ beta (1, 10);
y ~ binomial (n, p);
}
"
stanDso <- stan_model ( model_code = modelString )
stanFit <- sampling ( object = stanDso ,
data = dataList ,
chains = 2 ,
iter = 5000 ,
warmup = 200 ,
thin = 1)
stanPosterior <- as.array(stanFit)
inspect_chains(stanFit, stanPosterior, "p")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
n <- 165
y <- 9
dataList= list(n=n, y = y)
modelString  =
"
data {
int <lower=0> n;
int <lower=0> y;
}
parameters {
real <lower=0, upper=1> p;
}
model {
p ~ beta (1, 10);
y ~ binomial (n, p);
}
"
stanDso <- stan_model ( model_code = modelString )
stanFit <- sampling ( object = stanDso ,
data = dataList ,
chains = 2 ,
iter = 5000 ,
warmup = 200 ,
thin = 1)
stanPosterior <- as.array(stanFit)
inspect_chains(stanFit, stanPosterior, "p")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
n <- 165
y <- 9
dataList= list(n=n, y = y)
modelString  =
"
data {
int <lower=0> n;
int <lower=0> y;
}
parameters {
real <lower=0, upper=1> p;
}
model {
p ~ beta (12, 115);
y ~ binomial (n, p);
}
"
stanDso <- stan_model ( model_code = modelString )
stanFit <- sampling ( object = stanDso ,
data = dataList ,
chains = 2 ,
iter = 5000 ,
warmup = 200 ,
thin = 1)
stanPosterior <- as.array(stanFit)
inspect_chains(stanFit, stanPosterior, "p")
knitr::opts_chunk$set(echo = TRUE)
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
ComputePosterior <- function(sigma, data, mean_prior, sigma_prior){
N <- length(data)
mean_posterior <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
c(mean=mean_posterior, sigma=sigma_posterior)
}
(ComputePosterior)
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
ComputePosterior <- function(sigma, data, mean_prior, sigma_prior){
N <- length(data)
mean_posterior <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
c(mean=mean_posterior, sigma=sigma_posterior)
}
(ComputePosterior)
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
ComputePosterior <- function(sigma, data, mean_prior, sigma_prior){
N <- length(data)
mean_posterior <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
c(mean=mean_posterior, sigma=sigma_posterior)
}
parms_posterior <- ComputePosterior
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
ComputePosterior <- function(sigma=sigma, data=data, mean_prior=mean_prior, sigma_prior=sigma_prior){
N <- length(data)
mean_posterior <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
c(mean=mean_posterior, sigma=sigma_posterior)
}
parms_posterior <- ComputePosterior
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
ComputePosterior <- function(sigma=sigma, data=data, mean_prior=mean_prior, sigma_prior=sigma_prior){
N <- length(data)
mean_posterior <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
c(mean=mean_posterior, sigma=sigma_posterior)
}
parms_posterior <- ComputePosterior()
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
N <- length(data)
mean_posterior <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*simga_prior^2))^(-2)
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*sigma_prior^2))^(-2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- sigma_prior^(-2)/(N/sigma^(2)+1/(sigma_prior^2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*sigma_prior^2))^(-2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- sigma_prior^(-2)/(N/sigma^2 + sigma_prior^(-2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*sigma_prior^2))^(-2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- sigma_prior**(-2)/(N/sigma**2 + sigma_prior**(-2))*mean_prior
sigma_posterior <- ((sigma^2+N*sigma_prior^2)/(sigma^2*sigma_prior^2))^(-2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2) + sum(data)*sigma^(-2))/(mean_prior*sigma_prior^(-2) + N*sigma^(-2))
sigma_posterior <- (sigma_prior^(-2)+N*sigma^(-2))^(-1/2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2) + sum(data)*sigma^(-2))/(mean_prior*sigma_prior^(-2) + N*sigma^(-2))
sigma_posterior <- (sigma_prior^(-2)+N*sigma^(-2))^(-1/2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2) + sum(data)*sigma^(-2))/(mean_prior*sigma_prior^(-2) + N*sigma^(-2))
sigma_posterior <- (sigma_prior^(-2)+N*sigma^(-2))^(-1/2)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2) + sum(data)*sigma^(-2))/(mean_prior*sigma_prior^(-2) + N*sigma^(-2))
sigma_posterior <- ((sigma_prior^(-2)+N*sigma^(-2))^(-1))^(-0.5)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2)+sum(data)*sigma^(-2)) / (sigma_prior^(-2)+N*sigma^(-2))
sigma_posterior <- ((sigma_prior^(-2)+N*sigma^(-2)))^(-0.5)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
?dnorm
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2)+sum(data)*sigma^(-2)) / (sigma_prior^(-2)+N*sigma^(-2))
sigma_posterior <- ((sigma_prior^(-2)+N*sigma^(-2)))^(-0.5)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
posterior <- function(x) sapply(x, function (X) dnorm(X, mean = mean_posterior, sd=sigma_posterior))
quantile_posterior <- function(p) sapply(p, function(P) qnorm(P, mean=mean_posterior, sd=sigma_posterior))
cred_95_interval <- sapply(c(2.5, 97.5), quantile_posterior)
cred_95_interval
data <- c(514,536,345,440,427,443,386,418,364,
483,506,385,410,561,275,306,294,402,
350,343,480,334,324,414,296)
N <- length(data)
sigma       <- 80
mean_prior  <- 325
sigma_prior <- 80
# Part 1
mean_posterior  <- (mean_prior*sigma_prior^(-2)+sum(data)*sigma^(-2)) / (sigma_prior^(-2)+N*sigma^(-2))
sigma_posterior <- ((sigma_prior^(-2)+N*sigma^(-2)))^(-0.5)
parms_posterior <-  c(mean=mean_posterior, sigma=sigma_posterior)
parms_posterior
posterior <- function(x) sapply(x, function (X) dnorm(X, mean = mean_posterior, sd=sigma_posterior))
quantile_posterior <- function(p) sapply(p, function(P) qnorm(P, mean=mean_posterior, sd=sigma_posterior))
cred_95_interval <- sapply(c(2.5e-2, 97.5e-2), quantile_posterior)
cred_95_interval
curve(posterior)
curve(posterior, from=0, to=450)
curve(posterior, from=350, to=450)
curve(posterior, from=350, to=450)
grid()
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
?seq
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot)
grid()
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot, border = NULL, col = 'red')
grid()
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot, border = NA, col = 'red')
grid()
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot, border = NA, col = 'red', alpha=0.8)
grid()
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot, border = NA, col = adjustcolor('red', alpha.f = 0.5))
grid()
help(line)
help(lines)
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot, border = NA, col = adjustcolor('red', alpha.f = 0.5))
abline(v=mean_posterior)
grid()
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=cred_95_interval[1], to = cred_95_interval[2], length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(cred_95_interval[1], x_plot, cred_95_interval[2])
polygon(x_plot, y_plot, border = NA, col = adjustcolor('red', alpha.f = 0.5))
abline(v=mean_posterior)
abline(v=mean_posterior+sigma_posterior)
abline(v=mean_posterior-sigma_posterior)
grid()
left_test <- quantile_posterior(0.95)
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=349, to = left_test, length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(349, x_plot, left_test)
polygon(x_plot, y_plot, border = NA, col = adjustcolor('red', alpha.f = 0.5))
abline(v=mean_posterior)
abline(v=mean_posterior+sigma_posterior)
abline(v=mean_posterior-sigma_posterior)
grid()
right_test <- quantile_posterior(0.05)
curve(posterior, from=350, to=450, main="Posterior distribution", ylab="Probability Density", xlab=expression(mu))
x_plot <- seq(from=right_test, to = 450, length.out=1000)
y_plot <- c(0, posterior(x_plot), 0)
x_plot <- c(right_test, x_plot, 450)
polygon(x_plot, y_plot, border = NA, col = adjustcolor('red', alpha.f = 0.5))
abline(v=mean_posterior)
abline(v=mean_posterior+sigma_posterior)
abline(v=mean_posterior-sigma_posterior)
grid()
help(gaussian test)
help.search(gaussian test)
help.search(gaussian)
help.search('gaussian test')
?beta
example(legend)
