burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, -10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, -10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,200), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,250), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,225), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,215), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,200), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Adjust the plot margins to make space for the legend
#par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 10))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Defining data
D <- c( 0.0032,	0.0034,	0.214,	0.263,	0.275,	0.275,	0.45,	0.5,	0.5,	0.63,	0.8,	0.9,	0.9,	0.9,	0.9,	2,	2,	2,	2)
V <- c(170,	290,	-130,	-70,	-185,	-220,	200,	290,	270,	200,	920,	450,	500,	500,	960,	500,	850,	800,	1090)
N_burnin <- 1000 # length of the burn-in phase
thinning <- 1
Nrep = 10000     # number of values to simulate
# Let' define the model
model_string <- "model{
# Likelihood
for (i in 1:length(D)) {
V[i] ~ dnorm(b*D[i], c)
}
# Prior
b ~ dunif(0, 1200)
c ~ dunif(0, 0.001)
}"
# Compile jags model
dataList = list(D = D, V=V)
model <- jags.model(file = textConnection(model_string),
data = dataList)
# Add burnin
update(model, n.iter = N_burnin)
# Sample the posterior
posterior_sample <- coda.samples(model,
variable.names = c("b", "c"),
n.iter = Nrep, thin = thinning)
summary(posterior_sample)
plot(posterior_sample)
# Retrieve the samples
posterior_matrix <- as.matrix(posterior_sample)
b_samples <- posterior_matrix[, "b"]
c_samples <- posterior_matrix[, "c"]
# Set up the plotting area to have 1 rows and 2 column
par(mfrow = c(1, 2))
acf(b_samples, main = "Autocorrelation of b")
acf(c_samples, main = "Autocorrelation of c")
b_hist <- hist(b_samples, breaks = 30, main = "Posterior Distribution of b", xlab = "b", freq = FALSE, col = NULL, border = color_vector[6])
plot_intervals(b_hist)
b_best <- b_hist$mids[ which.max(b_hist$density) ]
c_hist <- hist(c_samples, breaks = 30, main = "Posterior Distribution of c", xlab = "c", freq = FALSE,  col = NULL, border = color_vector[6])
plot_intervals(c_hist)
c_best <- c_hist$mids[ which.max(c_hist$density) ]
plot(D, V, main="Fit Hubble Law", col=color_vector[6], pch=19)
curve(b_best*x, from = 0, to = 13, add=TRUE, col=color_vector[7], lwd=2)
b_hist <- hist(b_samples, breaks = 30, main = "Posterior Distribution of b", xlab = "b", freq = FALSE, col = NULL, border = color_vector[6], xlim = c(200,800))
plot_intervals(b_hist)
b_best <- b_hist$mids[ which.max(b_hist$density) ]
c_hist <- hist(c_samples, breaks = 30, main = "Posterior Distribution of c", xlab = "c", freq = FALSE,  col = NULL, border = color_vector[6])
plot_intervals(c_hist)
c_best <- c_hist$mids[ which.max(c_hist$density) ]
plot(D, V, main="Fit Hubble Law", col=color_vector[6], pch=19)
curve(b_best*x, from = 0, to = 13, add=TRUE, col=color_vector[7], lwd=2)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)ààà
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
mcmc_chain_list
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
chain_list_RDS
N <- 100000
theta_0 <- 0
chain <- Metropolis_Hastings(N, theta_0)
df <- data.frame(chain = chain)
plt <- ggplot(df, aes(x = chain, y=after_stat(density))) +
geom_histogram(bins = 50, fill=color_vector[5], alpha = 1., color='black') +
geom_density(color = color_vector[7], size = 1) +
labs(title = "Histogram and Density of Metropolis-Hastings Chain", x = expression(theta), y = "Posterior")
# Display the plot
print(plt)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = 50, freq = FALSE, col = NULL, border = color, add=TRUE)
}
hist(x=chain, , breaks = 50, freq = FALSE, col = NULL, border = color)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = 50, freq = FALSE, col = NULL, border = color, add=TRUE)
}
hist(x=chain, , breaks = 50, freq = FALSE, col = NULL, border = color_vector[7])
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = posterior_breaks, freq = FALSE, col = NULL, border = color, add=TRUE)
}
posterior_breaks <- hist(x=chain, breaks = 50, freq = FALSE, col = NULL, border = color_vector[7])$breaks
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = posterior_breaks, freq = FALSE, col = NULL, border = color, add=TRUE)
}
posterior_breaks <- hist(x=chain, breaks = 50, freq = FALSE, col = NULL, border = color_vector[7])$breaks
void <- mapply(plot_posterior, chain_list_RDS, colormap)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = c(-Inf, posterior_breaks, Inf), freq = FALSE, col = NULL, border = color, add=TRUE)
}
posterior_breaks <- hist(x=chain, breaks = 50, freq = FALSE, col = NULL, border = color_vector[7])$breaks
void <- mapply(plot_posterior, chain_list_RDS, colormap)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = c(-Inf, posterior_breaks, Inf), freq = FALSE, col = NULL, border = color, add=TRUE)
}
posterior_breaks <- hist(x=chain, breaks = 50, freq = FALSE, col = NULL, border = color_vector[7], xlim = c(-5, 7))$breaks
void <- mapply(plot_posterior, chain_list_RDS, colormap)
legend('topright', legend = labels, col = colormap, lty = 1, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = c(-Inf, posterior_breaks, Inf), freq = FALSE, col = NULL, border = color, add=TRUE)
}
posterior_breaks <- hist(x=chain, breaks = 50, freq = FALSE, col = NULL, border = color_vector[7], xlim = c(-7, 10))$breaks
void <- mapply(plot_posterior, chain_list_RDS, colormap)
legend('topright', legend = labels, col = colormap, lty = 1, lwd = 2, ncol = 1, cex = 0.8)
burnin_list   <- list(100, 1000, 10000)
thinning_list <- list(5, 10, 50)
# Retrieve the precomputed chains
chain_list_RDS <- readRDS("chain_list_RDS.RData")
# Plot the autocorrelation
mcmc_chain_list <- lapply(chain_list_RDS,  mcmc)
N_chains <- length(mcmc_chain_list)
lags <- seq(0, 150, 5)
autocorr_chain_list <- lapply(mcmc_chain_list, function(mcmc_chain) log(abs(autocorr(mcmc_chain, lags = lags))))
ylim=c(min(unlist(autocorr_chain_list)), max(unlist(autocorr_chain_list))*1.1)
vanilla_mcmc <- log(abs(autocorr(mcmc_chain, lags = lags)))
colormap <- rainbow(N_chains)
labels <- unlist(lapply(burnin_list, function(burnin)
lapply(thinning_list, function(thinning)
paste("B =", burnin, ", T =", thinning))))
plot(lags, vanilla_mcmc, type = 's', col=color_vector[7], lty=1, lwd=2, main = 'Autocorrelation of the chains', xlab = 'lags', ylab='log(|autocorrelation|)', xlim = c(0,205), ylim = ylim)
void <- sapply(1:N_chains, function(iline) lines(lags, autocorr_chain_list[[iline]], type = 's', col=colormap[iline], lty=iline, lwd=2))
# Place the legend outside the plot area, using multiple columns
legend('topright', legend = labels, col = colormap, lty = 1:N_chains, lwd = 2, ncol = 1, cex = 0.8)
# Plot the posterior
plot_posterior <- function(chain, color){
hist(chain, breaks = c(-Inf, posterior_breaks, Inf), freq = FALSE, col = NULL, border = color, add=TRUE, xlab = expression(theta), ylab = 'density', main = 'Histogram of the posteriors from different chains')
}
posterior_breaks <- hist(x=chain, breaks = 50, freq = FALSE, col = NULL, border = color_vector[7], xlim = c(-7, 10))$breaks
void <- mapply(plot_posterior, chain_list_RDS, colormap)
legend('topright', legend = labels, col = colormap, lty = 1, lwd = 2, ncol = 1, cex = 0.8)
